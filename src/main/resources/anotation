Аннотация @Async к методу позволяет выполнить его в отдельном потоке.
В результате, когда предыдущее выполнение метода занимает больше времени,
чем интервал с фиксированной скоростью, последующий вызов метода сработает,
даже если предыдущий вызов все еще выполняется.

Это позволит выполнять несколько запусков метода параллельно в течение перекрывающегося временного интервала.

Без применения аннотации @Async метод всегда будет выполняться после завершения предыдущего выполнения,
даже если интервал с фиксированной скоростью истек.

------------------------------------------------------------------------------------------------------------------------

    @Scheduled(fixedDelay = 5000) //
    @Async
    void deleteOldUrlRecords() throws InterruptedException {
        //urlRepository.findById()
        log.info("begin");

        Thread.sleep(2000);
        log.info("end");
    }

    @Scheduled(cron = "0 * * * * ?", zone = "Europe/Kiev")
    cron = "0 * * * * ?"
    1 = seconds(0-59), 2 = minutes(0-59), 3 = hours(0-23), 4 = day of month(1-31), 5 = month(1-12 or JAN-DEC),
    6 = day of week(0-7, or MON-SUN)

    наприклад вираз 0 10 12 11 * ? означає що таск треба виповнювати в 12 годин 10хв 00сек, кожного 11 числа